name: crear ejecutables

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  create_release:
    permissions:
      contents: write
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install Toml
        run: pip install toml

      - name: Extract version
        id: extract_version
        shell: bash
        run: |
          echo "version=$(python ./version.py)" >> $GITHUB_OUTPUT

      - name: Extract Changes
        id: extract_changes
        shell: powershell
        run: |
          $content = Get-Content ./CHANGELOG.md -Raw
          $encodedContent = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($content))
          echo "changes=$encodedContent" >> $env:GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version.outputs.version }}
          release_name: Release ${{ steps.extract_version.outputs.version }}
          body: ${{ steps.extract_changes.outputs.changes }}  # ¡Ojo! Aquí decodificaremos diferente
          draft: true
          prerelease: false

  build:
    needs: create_release
    permissions:
      contents: write

    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      
      - name: Install Poetry
        uses: Gr1N/setup-poetry@v9

      - name: Disable poetry virtualenv
        run: poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install

      - name: Install pyInstaller
        run: pip install pyinstaller
      
      - name: Build macOS
        if: matrix.os == 'macos-latest'
        run: pyinstaller --onefile --clean --add-data "./icon.ico:." --windowed --name "autoclicker-${{matrix.os}}" autoclicker/__init__.py
      
      - name: Build Linux or Windows
        if: matrix.os != 'macos-latest'
        run: pyinstaller --onefile --clean --add-data "./icon.ico:." --icon=./icon.ico --windowed --name "autoclicker-${{matrix.os}}" autoclicker/__init__.py
          
      - name: Compress folder windows
        if: matrix.os == 'windows-latest'
        run: |
            7z a ./dist/autoclicker-${{matrix.os}}.zip ./dist/
        
      - name: Compress folder posix
        if: matrix.os != 'windows-latest'
        run: |
            zip -r ./dist/autoclicker-${{matrix.os}}.zip ./dist/

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./dist/autoclicker-${{matrix.os}}.zip
          asset_name: autoclicker-${{matrix.os}}.zip
          asset_content_type: application/octet-stream